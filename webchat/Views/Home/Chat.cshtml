@model User
@functions {
    public bool IsImage(string content)
    {
        if (string.IsNullOrEmpty(content))
            return false;

        string lowerContent = content.ToLower();
        return lowerContent.EndsWith(".jpg") || lowerContent.EndsWith(".jpeg") ||
               lowerContent.EndsWith(".png") || lowerContent.EndsWith(".gif") ||
               lowerContent.EndsWith(".bmp") || lowerContent.EndsWith(".webp");
    }
    public bool IsFile(string content)
    {
        if (string.IsNullOrEmpty(content))
            return false;

        string lowerContent = content.ToLower();
        return lowerContent.EndsWith(".pdf") || lowerContent.EndsWith(".doc") ||
               lowerContent.EndsWith(".docx") || lowerContent.EndsWith(".xls") ||
               lowerContent.EndsWith(".xlsx") || lowerContent.EndsWith(".ppt") ||
               lowerContent.EndsWith(".pptx") || lowerContent.EndsWith(".zip") ||
               lowerContent.EndsWith(".rar") || lowerContent.EndsWith(".txt");
    }
    public bool IsVideo(string content)
    {
        if (string.IsNullOrEmpty(content))
            return false;

        string lowerContent = content.ToLower();
        return lowerContent.EndsWith(".mp4") || lowerContent.EndsWith(".webm") ||
               lowerContent.EndsWith(".ogg") || lowerContent.EndsWith(".avi") ||
               lowerContent.EndsWith(".mov") || lowerContent.EndsWith(".mkv");
    }
}
<link rel="stylesheet" href="~/css/Chat.css" asp-append-version="true" />

<div class="row" style="--bs-gutter-x:0px!important">
    <div class="chat-container justify-content-center mb-5 mt-5 d-flex flex-wrap ">
        <div class="types-chat col-md-6">

            <!-- Seen Messages -->

            <div class="messages-section-seen">
                <h5 class="mt-3">Seen Messages</h5>
                @if (ViewData["Users"] is List<webchat.Models.User> users)
                {
                    foreach (var user in users)
                    {
                        <form id="chatForm-@user.Id" action="@Url.Action("chat", "Home")" method="post" style="display: none;">
                            <input type="hidden" name="receiverId" value="@user.Id" />
                        </form>
                        <!-- الرابط يغلف كامل العنصر لتمكين النقر في أي مكان -->
                        <a href="#" class="message-link" onclick="document.getElementById('chatForm-@user.Id').submit(); return false;">
                            <div class="message-item">
                                <img src="@user.ProfilePicture" alt="User">
                                <div class="text-white">
                                    <strong>@user.NickName</strong><br>
                                    <!-- عرض آخر رسالة بين المستخدمين -->
                                    @if (ViewData["AllMessages"] is List<webchat.Models.Chat> allMessages)
                                    {
                                        var lastMessage = allMessages
                                        .Where(m => (m.SenderId == user.Id || m.ReceiverId == user.Id))
                                        .OrderByDescending(m => m.Timestamp)
                                        .FirstOrDefault();

                                       
                                            if (lastMessage != null)
                                            {
                                                <div class="message-content">@lastMessage.Content</div>
                                            }
                                       
                                       
                                    }
                                </div>
                            </div>
                        </a>
                    }
                }
            </div>


            <div id="notification" class="notification" style="display: none;">
                New message received!
            </div>

        </div>
  

            <!-- Chat Box -->
        <div id="chatBox" class="chat-box  col-md-6 " hidden>
                <div class="chat-header">
                    <img src=" @ViewData["ReceiverPhoto"] " alt="User">
                    <div>
                        <strong class="text-white"> @ViewData["ReceiverName"]</strong><br>
                        <span id="userStatus_@ViewData["ReceiverId"]" class="status" style="color: #99aab5;">
                            @if (Model.IsOnline)
                            {
                                <span>Online</span>
                            }
                            else
                            {
                                <span>Offline</span>
                            }
                        </span>
                    </div>
                </div>
                <input id="userId" type="hidden" value=" @ViewBag.SenderId " />

                <div id="chatContainer" class="chat-messages">
                    @if (@ViewData["Messages"] is List<webchat.Models.Chat> Content)
                    {
                        foreach (var chat in Content)
                        {
                            <div class="message @(chat.SenderId == ViewBag.SenderId ? "sent" : "received")">
                                @if (IsImage(chat.Content)) // التحقق مما إذا كانت الرسالة صورة
                                {
                                    <div class="bubble">
                                        <img src="@chat.Content" alt="Image" class="chat-image" />
                                    </div>
                                }
                            else if (IsFile(chat.Content)) // إذا كان ملفًا
                            {
                                <div class="bubble">
                                    <a href="@chat.Content" download class="file-link">
                                        <i class="fa fa-file"></i> Download File
                                    </a>
                                </div>
                            }
                            else if (IsVideo(chat.Content)) // إذا كان فيديو
                            {
                                <div class="bubble">
                                    <video controls class="chat-video">
                                        <source src="@chat.Content" type="video/mp4">
                                        <source src="@chat.Content" type="video/webm">
                                        <source src="@chat.Content" type="video/ogg">
                                        Your browser does not support the video tag.
                                    </video>
                                </div>
                            }
                                else
                                {
                                    <div class="bubble">@chat.Content</div>
                                }
                                <p class="message-timestamp">@chat.Timestamp.ToString("HH:mm")</p>
                            </div>

                        }
                    }

                </div>
                <div class="chat-input">
                    <input id="receiverId" type="hidden" value="@ViewBag.ReceiverId" />

                <label for="fileInput" class="file-label">📎</label>
                <input type="file" id="fileInput" style="display: none;" />

                    <textarea id="messageInput" placeholder="Type a message"></textarea>
                    <button id="sendButton">Send</button>
                </div>
            </div>
        

    </div>
</div>

 
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    // Initialize the SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")  // Specify the URL for the SignalR hub
        .build();

    // Start the connection and handle success or failure
    connection.start()
        .then(() => console.log("Connected to SignalR"))  // Log success message when connected
        .catch(err => console.error("SignalR connection error:", err));  // Log error message if connection fails

    // Function to check if a receiver has been selected
    function checkReceiverSelected() {
        const receiverId = parseInt(document.getElementById("receiverId").value);  // Get the receiver's ID
        const sendButton = document.getElementById("sendButton");  // Get the send button element
        const messageInput = document.getElementById("messageInput");  // Get the message input field element
        const chatBox = document.getElementById("chatBox");
        // Enable or disable send button and message input based on receiver selection
        if (receiverId) {
            chatBox.hidden = false;
            sendButton.disabled = false;  // Enable the send button if a receiver is selected
            messageInput.disabled = false;  // Enable message input if a receiver is selected
        } else {
            sendButton.disabled = true;  // Disable the send button if no receiver is selected
            messageInput.disabled = true; // Disable message input if no receiver is selected
            chatBox.hidden = true;
        }
    }

    // Add event listener to send message when the send button is clicked
       document.addEventListener("DOMContentLoaded", function () {
        let messageInput = document.getElementById("messageInput");
        let sendButton = document.getElementById("sendButton");
        let chatContainer = document.getElementById("chatContainer");

           function sendMessage(content = null, messageType = "text") {
        console.log("Sending:", content, messageType); // ✅ التأكد من القيم المرسلة

        const receiverId = parseInt(document.getElementById("receiverId").value);
        const userId = parseInt(document.getElementById("userId").value);
        const messageInput = document.getElementById("messageInput");

        // إذا لم يكن هناك محتوى مُمرر، يتم أخذ النص من input
        const messageContent = content ? content : messageInput.value.trim();

        if (messageContent !== "") {
            connection.invoke("SendMessage", userId, receiverId, messageContent, messageType)
                .then(() => {
                    let msgDiv = document.createElement("div");
                    msgDiv.className = "message sent";

                    if (messageType === "file") {
                        if (messageContent.match(/\.(jpeg|jpg|gif|png|bmp|webp)$/i)) {
                            msgDiv.innerHTML = `<a href="${messageContent}" target="_blank">
                                                    <img src="${messageContent}" class="chat-image" alt="Sent Image"
                                                         style="width: 200px; height: auto; border-radius: 8px;"/>
                                                </a>`;
                        } else {
                            msgDiv.innerHTML = `<a href="${messageContent}" target="_blank" class="chat-file">📂 Download File</a>`;
                        }
                    } else {
                        msgDiv.innerHTML = `<div class="bubble">${messageContent}</div>`;
                    }

                    document.getElementById("chatContainer").appendChild(msgDiv);
                    messageInput.value = "";
                    messageInput.style.height = "40px";
                    document.getElementById("chatContainer").scrollTop = document.getElementById("chatContainer").scrollHeight;
                })
                .catch(err => console.error("Error sending message:", err));
        }
    }

    window.sendMessage = sendMessage;

        // إرسال عند الضغط على زر الإرسال
        sendButton.addEventListener("click", sendMessage);

        // إرسال عند الضغط على Enter وتجنب الإرسال عند Shift + Enter
        messageInput.addEventListener("keydown", function (event) {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });

        // تعديل ارتفاع textarea تلقائيًا عند كتابة رسالة طويلة
        messageInput.addEventListener("input", function () {
            this.style.height = "40px";
            this.style.height = Math.min(this.scrollHeight, 150) + "px";
        });


    });

          document.getElementById("fileInput").addEventListener("change", function () {
        let file = this.files[0];
        if (file) {
            let formData = new FormData();
            formData.append("file", file);

            fetch("/Home/UploadFile", {
                method: "POST",
                body: formData
            })
            .then(response => response.text())
            .then(fileUrl => {
                if (fileUrl) {
                    sendMessage(getFullUrl(fileUrl), "file");
                }
            })
            .catch(error => console.error("Error uploading file:", error));
        }
    });


        // Handle receiving a new message via SignalR
           function getFullUrl(relativePath) {
        if (!relativePath.startsWith("http")) {
            return window.location.origin + relativePath;
        }
        return relativePath;
    }

    connection.on("ReceiveMessage", (senderId, message, messageType) => {
        const currentReceiverId = parseInt(document.getElementById("receiverId").value);

        if (senderId === currentReceiverId) {
            let messageDiv = document.createElement("div");
            messageDiv.className = "message received";

            let messageUrl = getFullUrl(message);

            if (messageType === "file") {
                if (messageUrl.match(/\.(jpeg|jpg|gif|png|bmp|webp)$/i)) {
                    messageDiv.innerHTML = `<a href="${messageUrl}" target="_blank">
                                                <img src="${messageUrl}" class="chat-image" alt="Received Image"
                                                     style="width: 200px; height: auto; border-radius: 8px;"/>
                                            </a>`;
                } else {
                    messageDiv.innerHTML = `<a href="${messageUrl}" target="_blank" class="chat-file">📂 Download File</a>`;
                }
            } else {
                messageDiv.innerHTML = `<div class="bubble">${message}</div>`;
            }

            document.getElementById("chatContainer").appendChild(messageDiv);
            document.getElementById("chatContainer").scrollTop = document.getElementById("chatContainer").scrollHeight;
        }
    });


    // Function to open the chat with a selected sender by redirecting to the chat page
    function openChatWithSender(senderId) {
        window.location.href = `/Home/Chat/?receiverId=${senderId}`;  // Redirect to the chat page with the selected sender
    }

    // Call the checkReceiverSelected function when the page is loaded
    window.onload = function () {
        checkReceiverSelected();
        scrollToBottom();  // Scroll to the bottom of the chat container when the page loads
    };

    // Function to scroll to the bottom of the chat container
    function scrollToBottom() {
        const chatContainer = document.getElementById("chatContainer");
        chatContainer.scrollTop = chatContainer.scrollHeight;  // Set the scroll position to the bottom
    }

    // Handle user online status via SignalR
    connection.on("UserOnline", (userId) => {
        updateUserStatus(userId, "Online");  // Update the user's status to 'Online'
    });

    // Handle user offline status via SignalR
    connection.on("UserOffline", (userId) => {
        updateUserStatus(userId, "Offline");  // Update the user's status to 'Offline'
    });

    // Function to update the user's online/offline status in the UI
    function updateUserStatus(userId, status) {
        const statusElement = document.getElementById(`userStatus_${userId}`);  // Get the user's status element
        if (statusElement) {
            statusElement.innerText = status;  // Update the status text
        }
    }
</script>





