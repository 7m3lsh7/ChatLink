@model User
<link rel="stylesheet" href="~/css/Chat.css" asp-append-version="true" />

<div class="row">
    <div class="chat-container justify-content-center mb-5 mt-5 d-flex flex-wrap ">
        <div class="types-chat col-md-6">

            <!-- Seen Messages -->

            <div class="messages-section-seen">
                <h5 class="mt-3">Seen Messages</h5>
                @if (ViewData["Users"] is List<webchat.Models.User> users)
                {
                    foreach (var user in users)
                    {
                        <!-- الرابط يغلف كامل العنصر لتمكين النقر في أي مكان -->
                        <a href="@Url.Action("chat", "Home", new { receiverId = user.Id })" class="message-link">
                            <div class="message-item">
                                <img src="@user.ProfilePicture" alt="User">
                                <div class="text-white">
                                    <strong>@user.NickName</strong><br>
                                    <!-- عرض آخر رسالة بين المستخدمين -->
                                    @if (ViewData["AllMessages"] is List<webchat.Models.Chat> allMessages)
                                    {
                                        var lastMessage = allMessages
                                        .Where(m => (m.SenderId == user.Id || m.ReceiverId == user.Id))
                                        .OrderByDescending(m => m.Timestamp)
                                        .FirstOrDefault();

                                        if (lastMessage != null)
                                        {
                                            <div class="message-content">@lastMessage.Content</div>
                                        }
                                        else
                                        {
                                            <div>No messages yet</div>
                                        }
                                    }
                                </div>
                            </div>
                        </a>
                    }
                }
            </div>


            <div id="notification" class="notification" style="display: none;">
                New message received!
            </div>

        </div>
  

            <!-- Chat Box -->
        <div id="chatBox" class="chat-box  col-md-6 " hidden>
                <div class="chat-header">
                    <img src=" @ViewData["ReceiverPhoto"] " alt="User">
                    <div>
                        <strong class="text-white"> @ViewData["ReceiverName"]</strong><br>
                        <span id="userStatus_@ViewData["ReceiverId"]" class="status" style="color: #99aab5;">
                            @if (Model.IsOnline)
                            {
                                <span>Online</span>
                            }
                            else
                            {
                                <span>Offline</span>
                            }
                        </span>
                    </div>
                </div>
                <input id="userId" type="hidden" value=" @ViewBag.SenderId " />

                <div id="chatContainer" class="chat-messages">
                    @if (@ViewData["Messages"] is List<webchat.Models.Chat> Content)
                    {
                        foreach (var chat in Content)
                        {
                            <div class="message @(chat.SenderId == ViewBag.SenderId ? "sent" : "received")">
                                <div class="bubble">@chat.Content</div><br />
                                <p class="message-timestamp ">@chat.Timestamp.ToString("HH:mm")</p>
                            </div>

                        }
                    }
                </div>
                <div class="chat-input">
                    <input id="receiverId" type="hidden" value="@ViewBag.ReceiverId" />


                    <input id="messageInput" type="text" placeholder="Type a message">
                    <button id="sendButton">Send</button>
                </div>
            </div>
        

    </div>
</div>

 
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    // Initialize the SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")  // Specify the URL for the SignalR hub
        .build();

    // Start the connection and handle success or failure
    connection.start()
        .then(() => console.log("Connected to SignalR"))  // Log success message when connected
        .catch(err => console.error("SignalR connection error:", err));  // Log error message if connection fails

    // Function to check if a receiver has been selected
    function checkReceiverSelected() {
        const receiverId = parseInt(document.getElementById("receiverId").value);  // Get the receiver's ID
        const sendButton = document.getElementById("sendButton");  // Get the send button element
        const messageInput = document.getElementById("messageInput");  // Get the message input field element
        const chatBox = document.getElementById("chatBox");
        // Enable or disable send button and message input based on receiver selection
        if (receiverId) {
            chatBox.hidden = false;
            sendButton.disabled = false;  // Enable the send button if a receiver is selected
            messageInput.disabled = false;  // Enable message input if a receiver is selected
        } else {
            sendButton.disabled = true;  // Disable the send button if no receiver is selected
            messageInput.disabled = true; // Disable message input if no receiver is selected
            chatBox.hidden = true;
        }
    }

    // Add event listener to send message when the send button is clicked
    document.getElementById("sendButton").addEventListener("click", () => {
        const receiverId = parseInt(document.getElementById("receiverId").value);  // Get receiver's ID
        const message = document.getElementById("messageInput").value.trim();  // Get the message content

        if (message !== "") {  // Check if the message is not empty
            const userId = parseInt(document.getElementById("userId").value);  // Get sender's ID

            // Invoke the 'SendMessage' method in the SignalR Hub
            connection.invoke("SendMessage", userId, receiverId, message)
                .then(() => {
                    // If the message is sent, add it to the chat UI
                    const msgDiv = document.createElement("div");
                    msgDiv.className = "message sent";  // Apply 'sent' class to the message
                    msgDiv.innerHTML = `<div class="bubble">${message}</div>`;  // Create a message bubble with the content
                    document.getElementById("chatContainer").appendChild(msgDiv);  // Append the message to the chat container

                    // Clear the message input field
                    document.getElementById("messageInput").value = "";

                    // Scroll to the bottom of the chat to show the new message
                    document.getElementById("chatContainer").scrollTop = document.getElementById("chatContainer").scrollHeight;
                })
                .catch(err => console.error(err));  // Log error if message sending fails
        }
    });

    // Handle receiving a new message via SignalR
    connection.on("ReceiveMessage", (senderId, message, senderName) => {
        const messageDiv = document.createElement("div");
        messageDiv.className = "message received";  // Apply 'received' class to the incoming message
        messageDiv.innerHTML = `
            <div class="bubble">${message}</div>  
            <p class="message-timestamp">${new Date().toLocaleTimeString()}</p>  
        `;
        document.getElementById("chatContainer").appendChild(messageDiv);  // Append the received message to the chat container

        // Scroll to the bottom of the chat to show the new message
        document.getElementById("chatContainer").scrollTop = document.getElementById("chatContainer").scrollHeight;

        // Show a notification when a new message is received
        document.getElementById("notification").style.display = "block";
    });

    // Function to open the chat with a selected sender by redirecting to the chat page
    function openChatWithSender(senderId) {
        window.location.href = `/Home/Chat/?receiverId=${senderId}`;  // Redirect to the chat page with the selected sender
    }

    // Call the checkReceiverSelected function when the page is loaded
    window.onload = function () {
        checkReceiverSelected();
        scrollToBottom();  // Scroll to the bottom of the chat container when the page loads
    };

    // Function to scroll to the bottom of the chat container
    function scrollToBottom() {
        const chatContainer = document.getElementById("chatContainer");
        chatContainer.scrollTop = chatContainer.scrollHeight;  // Set the scroll position to the bottom
    }

    // Handle user online status via SignalR
    connection.on("UserOnline", (userId) => {
        updateUserStatus(userId, "Online");  // Update the user's status to 'Online'
    });

    // Handle user offline status via SignalR
    connection.on("UserOffline", (userId) => {
        updateUserStatus(userId, "Offline");  // Update the user's status to 'Offline'
    });

    // Function to update the user's online/offline status in the UI
    function updateUserStatus(userId, status) {
        const statusElement = document.getElementById(`userStatus_${userId}`);  // Get the user's status element
        if (statusElement) {
            statusElement.innerText = status;  // Update the status text
        }
    }
</script>





