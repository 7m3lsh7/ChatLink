@model User

<nav class="navbar navbar-expand-lg color " style=" width: 90px; ">
    <div class="container-fluid">
        <div class="navbar-column">
            <div class="profile-picture">
                <img src="@Model.ProfilePicture" alt="Profile Picture">
            </div>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item pt-2 pb-2">
                        <a class="nav-link active" aria-current="page" href="/Home/index">
                            <i class="fa-solid text-white fa-house"></i>
                        </a>
                    </li>
                    <li class="nav-item pt-2 pb-2">
                        <a class="nav-link" href="/Profile/index">
                            <i class="fa-solid text-white fa-user"></i>
                        </a>
                    </li>
                    <li class="nav-item pt-2 pb-2">
                        <a class="nav-link" href="/Home/Chat">
                            <i class="fa-solid text-white fa-bell"></i>
                        </a>
                    </li>
                    <li class="nav-item pt-2 pb-2">
                        <a class="nav-link" href="/Profile/Search">
                            <i class="fa-solid text-white fa-magnifying-glass"></i>
                        </a>
                    </li>
                    <li class="nav-item pt-2 pb-2">
                        <a class="nav-link" href="/Profile/index">
                            <i class="fa-solid text-white fa-sliders"></i>
                        </a>
                    </li>

                </ul>
            </div>
            <div class="logout">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/Account/Logout">
                            <i class="fa-solid text-danger fa-right-from-bracket"></i>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</nav>


<div class="chat-container ">
    <div class="types-chat">

        <!-- Seen Messages -->

        <div class="messages-section-seen">
            <h5>Seen Messages</h5>
            @if (ViewData["Users"] is List<webchat.Models.User> users)
            {
                foreach (var user in users)
                {
                    
                        <!-- الرابط يغلف كامل العنصر لتمكين النقر في أي مكان -->
                        <a href="@Url.Action("chat", "Home", new { receiverId = user.Id })" class="message-link">
                        <div class="message-item">
                            <img src="@user.ProfilePicture" alt="User">
                            <div class="text-white">
                                <strong>@user.NickName</strong><br>
                                <!-- عرض آخر رسالة بين المستخدمين -->
                                @if (ViewData["AllMessages"] is List<webchat.Models.Chat> allMessages)
                                {
                                    var lastMessage = allMessages
                                    .Where(m => (m.SenderId == user.Id  || m.ReceiverId == user.Id ))
                                    .OrderByDescending(m => m.Timestamp)
                                    .FirstOrDefault();

                                    if (lastMessage != null)
                                    {
                                        <div class="message-content">@lastMessage.Content</div>
                                    }
                                    else
                                    {
                                        <div>No messages yet</div>
                                    }
                                }
                            </div>
                        </div>
                        </a>
                 
                }
            }
         </div>

        <!-- Unseen Messages -->
        <div class="messages-section-unseen">
            <h5 class="text-white">Unseen Messages</h5>
            <input type="hidden" id="unseenMessagesData" value='@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewData["UnseenMessages"]))' />
            <div id="unseenMessagesContainer" class="unseen-messages"></div>
        </div>
        <div id="notification" class="notification" style="display: none;">
            New message received!
        </div>
    </div>
    <!-- Chat Box -->
    <div class="chat-box">
        <div class="chat-header">
            <img src=" @ViewData["ReceiverPhoto"] " alt="User">
            <div>
                <strong class="text-white"> @ViewData["ReceiverName"]</strong><br>
                <span style="color: #99aab5;">Online</span>
            </div>
        </div>
        <input id="userId" type="hidden" value=" @ViewBag.SenderId " />

        <div id="chatContainer" class="chat-messages">
            @if (@ViewData["Messages"] is List<webchat.Models.Chat> Content)
            {
                foreach (var chat in Content)
                {
                    <div class="message @(chat.SenderId == ViewBag.SenderId ? "sent" : "received")">
                        <div class="bubble">@chat.Content</div><br />
                        <p class="message-timestamp ">@chat.Timestamp.ToString("HH:mm")</p>
                    </div>
                    
                }
            }
        </div>
        <div class="chat-input">
            <input id="receiverId" type="hidden" value="@ViewBag.ReceiverId" />
           

            <input id="messageInput" type="text" placeholder="Type a message">
            <button id="sendButton">Send</button>
        </div>
    </div>

</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    // إعداد اتصال SignalR
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.start()
        .then(() => console.log("Connected to SignalR"))
        .catch(err => console.error("SignalR connection error:", err));

    // إرسال رسالة عند النقر على زر الإرسال
    document.getElementById("sendButton").addEventListener("click", () => {
        const receiverId = parseInt(document.getElementById("receiverId").value);
        const message = document.getElementById("messageInput").value.trim();

        if (message !== "") {
            const userId = parseInt(document.getElementById("userId").value);
            connection.invoke("SendMessage", userId, receiverId, message)
                .then(() => {
                    // إضافة الرسالة إلى واجهة المستخدم
                    const msgDiv = document.createElement("div");
                    msgDiv.className = "message sent";
                    msgDiv.innerHTML = `<div class="bubble">${message}</div>`;
                    document.getElementById("chatContainer").appendChild(msgDiv);

                    // تفريغ حقل الإدخال
                    document.getElementById("messageInput").value = "";
                })
                .catch(err => console.error(err));
        }
    });

    // استقبال رسالة جديدة عبر SignalR
    connection.on("ReceiveMessage", (senderId, message, senderName) => {
        // إذا كان الشخص غير متصل أو في شات آخر، أضف الرسالة إلى صندوق الرسائل الغير مقروءة
        const unseenMessagesContainer = document.getElementById("unseenMessagesContainer");

        const msgDiv = document.createElement("div");
        msgDiv.className = "message received";
        msgDiv.innerHTML = `<div class="bubble">${message}</div>`;
        msgDiv.setAttribute("data-sender-id", senderId);  // تخزين الـ senderId
        msgDiv.setAttribute("data-message", message);
        msgDiv.setAttribute("data-sender-name", senderName);
        unseenMessagesContainer.appendChild(msgDiv);

        // إظهار إشعار أن هناك رسالة جديدة
        document.getElementById("notification").style.display = "block";
    });

    // تحميل الرسائل غير المقروءة عند تحميل الصفحة
    document.addEventListener("DOMContentLoaded", function () {
        const unseenMessages = JSON.parse(document.getElementById("unseenMessagesData").value);
        const unseenMessagesContainer = document.getElementById("unseenMessagesContainer");

        // عرض جميع الرسائل الغير مقروءة
        if (unseenMessages && unseenMessages.length > 0) {
            unseenMessages.forEach((message) => {
                const messageElement = document.createElement("div");
                messageElement.classList.add("unseen-message", "p-2", "mb-2", "bg-light", "rounded");
                messageElement.innerHTML = `
                    <p><strong>From:</strong> ${message.senderName}</p>
                    <p>${message.content}</p>
                    <small>${new Date(message.timestamp).toLocaleString()}</small>
                `;

                // عند النقر على الرسالة، تحديث حالتها إلى "مقروءة" وفتح الشات مع المرسل
                messageElement.addEventListener("click", function () {
                    markMessageAsRead(message.id);

                    // إزالة الرسالة من قائمة الرسائل الغير مقروءة
                    messageElement.remove();

                    // إضافة الرسالة إلى الرسائل المقرؤة
                    addToSeenMessages(message);

                    // فتح الشات مع المرسل
                    openChatWithSender(message.senderId);
                });

                unseenMessagesContainer.appendChild(messageElement);
            });
        } else {
            unseenMessagesContainer.innerHTML = "<p>No unseen messages</p>";
        }
    });

    // وظيفة لتحديث حالة الرسالة إلى "مقروءة" باستخدام طلب AJAX
    function markMessageAsRead(messageId) {
        fetch(`/Home/MarkAsRead/${messageId}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRF-TOKEN": document.querySelector("input[name='__RequestVerificationToken']").value,
            },
        })
            .then((response) => {
                if (response.ok) {
                    console.log("Message marked as read.");
                } else {
                    console.error("Failed to mark message as read.");
                }
            })
            .catch((error) => console.error("Error:", error));
    }

    function openChatWithSender(senderId) {
        // فتح الشات مع المرسل في جزء الشات
        window.location.href = `/Home/Chat/${senderId}`;
    }

    function addToSeenMessages(message) {
        const seenMessagesContainer = document.getElementById("seenMessagesContainer");

        const messageElement = document.createElement("div");
        messageElement.classList.add("seen-message", "p-2", "mb-2", "bg-light", "rounded");
        messageElement.innerHTML = `
            <p><strong>From:</strong> ${message.senderName}</p>
            <p>${message.content}</p>
            <small>${new Date(message.timestamp).toLocaleString()}</small>
        `;

        seenMessagesContainer.appendChild(messageElement);
    }

    // تنفيذ التحقق عند تحميل الصفحة
    window.onload = function () {
        checkReceiverSelected();
    };
</script>



<style>
    :root {
        --primary-color: #6C63FF;  
        --secondary-color: #2D2B8B;  
        --background-gradient: linear-gradient(135deg, #6C63FF 0%, #B46FFF 100%);
        --dark-bg: #2D2B8B;
        --light-bg: #F3F3F3;
        --accent-color: #FFD700;
        --bubble-sent-color: #544cd5;
        --bubble-received-color: #2320a1;
        --input-bg: #FFFFFF;
        --input-border-color: #BDBDBD;
        --color: #3B1868;
    }

    body {
        background: var(--background-gradient);
        font-family: 'Kadwa', serif;
        color: #FFF;
        margin: 0;
    }

    .message-timestamp {
        font-size: 12px;
        color: #99aab5;
        margin-top: 5px;
    }
      a {
       
        text-decoration: none;  
        color: inherit;  
    }
    .color {
        background-color: var(--color);
        width: fit-content;
        height: 100%;
        display: inline-block;
    }

     .navbar .container-fluid .navbar-column {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        align-items: center;
        justify-content: space-between;
    }

        .navbar .container-fluid .navbar-column .logout {
            padding-top: 100px;
        }

    .navbar .container-fluid .navbar-nav {
        display: flex;
        flex-direction: column;
        flex-wrap: wrap;
        margin-top: 50px;
    }

    .nav-link {
        font-size: 1.2rem;
        margin: 10px 0;
    }

        .nav-link i {
            font-size: 2rem;
        }
    .navbar .navbar-nav .nav-item:hover,
    .navbar .navbar-nav .nav-item:focus {
        background-color: var(--secondary-color);
        color: #fff;
        transform: scale(1.1);
    }

    .navbar .navbar-nav .nav-item:active {
        background-color: var(--primary-color);
        color: #fff;
    }

    .navbar .navbar-nav .nav-item.active {
        background-color: #4A0072;
        color: #fff;
    }

        .navbar .navbar-nav .nav-item:hover i,
        .navbar .navbar-nav .nav-item:focus i,
        .navbar .navbar-nav .nav-item:active i,
        .navbar .navbar-nav .nav-item.active i {
            color: var(--accent-color);
        }

     .profile-picture {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        overflow: hidden;
        border: 2px solid #ddd;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
    }

    .chat-container {
        display: inline-flex;
         height: 600px;
    }

    .messages-section-seen,
    .messages-section-unseen {
        flex: 1;
        background: var(--background-gradient);
        border-radius: 15px;
        padding: 0 20px;
        margin-top: auto;
    }

    .messages-section-unseen {
        margin-top: 50px;
    }

    .messages-section h5 {
        text-align: center;
        margin-bottom: 10px;
        font-size: 20px;
    }

    .message-item {
        display: flex;
        align-items: center;
        gap: 12px;
        background: var(--dark-bg);
        border-radius: 10px;
        padding: 12px;
        margin-bottom: 12px;
        transition: all 0.3s ease;
    }

        .message-item:hover {
            background: var(--primary-color);
            transform: scale(1.05);
        }

        .message-item img {
            width: 45px;
            height: 45px;
            border-radius: 50%;
        }

    .chat-box {
        flex: 2;
        background-color: var(--primary-color);
        border-radius: 15px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        width: 700px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .chat-header {
        background: var(--secondary-color);
        border-radius: 15px 15px 0 0;
        padding: 20px;
        display: flex;
        align-items: center;
        gap: 15px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

        .chat-header img {
            width: 55px;
            height: 55px;
            border-radius: 50%;
        }

    .types-chat {
        width: 500px;
        margin: 0 20px 20px 20px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .chat-messages {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
    }

    .message {
        margin-bottom: 15px;
    }

        .message.sent {
            text-align: right;
        }

        .message .bubble {
            display: inline-block;
            padding: 15px 20px;
            border-radius: 20px;
            max-width: 75%;
            word-wrap: break-word;
        }

        .message.sent .bubble {
            background-color: var(--bubble-sent-color);
            color: white;
        }

        .message.received .bubble {
            background-color: var(--bubble-received-color);
            color: white;
        }

    .chat-input {
        display: flex;
        padding: 12px;
        gap: 12px;
        background: var(--light-bg);
        border-radius: 15px;
    }

        .chat-input input {
            flex: 1;
            padding: 12px;
            border-radius: 10px;
            border: 2px solid var(--input-border-color);
            background-color: var(--input-bg);
            font-size: 16px;
        }

        .chat-input button {
            padding: 12px 18px;
            border-radius: 10px;
            border: none;
            background-color: var(--primary-color);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .chat-input button:hover {
                background-color: var(--secondary-color);
                transform: scale(1.05);
            }
</style>
     