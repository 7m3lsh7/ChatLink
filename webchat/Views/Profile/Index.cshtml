@model User
<link rel="stylesheet" href="~/css/Profile.css" asp-append-version="true" />

<!-- Main Content -->
<div class="profile-content">
    <!-- Top Bar -->
    <!-- Header -->
    <div class="profile-header">
        <h1>Welcome, @Model.NickName</h1>
        @if (ViewData["IsAdmin"] != null && ViewData["IsAdmin"].ToString() == "true")
        {
            <a href="@Url.Action("Index", "Dashboard")" class="btn btn-primary mt-3">Go to Dashboard</a>
        }
    </div>

    <div class="row">
        <div class="col-lg-3 text-center iamge">
            <img src="@Model.ProfilePicture" loading="lazy" class="profile-pic mb-3" alt="User Image">
            <h5>@Model.NickName</h5>
        </div>
        <div class="col-lg-9">
            <form id="profileForm">
                <!-- Buttons for Edit/Save -->
                <button type="button" id="editButton" class="btn btn-dark">Edit</button>
                <button type="submit" id="saveButton" class="btn btn-success" style="display: none;">Save</button>
                <button type="button" id="deleteAccountBtn" class="btn btn-danger float-end">Delete Account</button>
                <input type="hidden" name="Id" value="@Model.Id" />

                <div class="row mt-3">
                    <div class="col-md-6 mb-3">
                        <label for="fullName" class="form-label">Full Name :</label>
                        <input type="text" class="form-control" id="fullName" name="Username" value="@Model.Username" readonly>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="nickName" class="form-label">Nick Name :</label>
                        <input type="text" class="form-control" id="nickName" name="NickName" value="@Model.NickName" readonly>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="gender" class="form-label">Gender :</label>
                        <input type="text" class="form-control" id="gender" name="Gender" value="@Model.Gender" readonly>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="country" class="form-label">Country :</label>
                        <input type="text" class="form-control" id="country" name="Country" value="@Model.Country" readonly>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="language" class="form-label">Language :</label>
                        <input type="text" class="form-control" id="language" name="Language" value="@Model.Language" readonly>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="timeZone" class="form-label">Time Zone :</label>
                        <select class="form-control" id="timeZone" name="TimeZone" disabled>
                            @if (Model.TimeZone != null)
                            {
                                <option value="@Model.TimeZone">@Model.TimeZone</option>
                            }

                            <option value="UTC">UTC (Coordinated Universal Time)</option>
                            <option value="Europe/London">GMT (Greenwich Mean Time)</option>
                            <option value="Africa/Cairo">EET (Eastern European Time - Cairo)</option>
                            <option value="Pacific/Auckland">Pacific/Auckland (New Zealand Time)</option>
                            <option value="America/New_York">Eastern Standard Time (EST)</option>
                            <option value="America/Los_Angeles">Pacific Standard Time (PST)</option>
                            <option value="America/Chicago">Central Standard Time (CST)</option>
                            <option value="Europe/Berlin">Central European Time (CET)</option>
                            <option value="Asia/Dubai">Arabian Standard Time (AST - Dubai)</option>
                            <option value="Asia/Tokyo">Japan Standard Time (JST)</option>
                            <option value="Asia/Kolkata">Indian Standard Time (IST)</option>
                            <option value="Australia/Sydney">Australian Eastern Time (AET - Sydney)</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="profilePicture" class="form-label">Profile Picture :</label>
                      <div class="custom-file-upload">
                        <input type="file" id="profilePicture" name="ProfilePicture" accept="image/*" hidden disabled>
                        <label for="profilePicture" class="upload-label">
                            <i class="fas fa-cloud-upload-alt"></i> Choose a File
                        </label>
                    </div>
                </div>
                <div>
                    <h5 class="mt-4">My Email Address</h5>
                    <p class="text-muted">
                        @if (!string.IsNullOrEmpty(Model.Email))
                        {
                            var emails = Model.Email.Split(',');
                            foreach (var email in emails)
                            {
                                <span>@email</span>
                                <br />
                            }
                        }
                    </p>
                    <a class="btn btn-primary mb-3" href="@Url.Action("AddEmail", "Profile", new { id = Model.Id })">Add Your New Email</a>
                    <a class="btn btn-warning mb-3" href="@Url.Action("ChangePassword", "Profile", new { id = Model.Id })">
                        <i class="fas fa-lock"></i> Change Password
                    </a>
                </div>

            </form>
        </div>
    </div>

</div>

<!-- Delete Account Modal -->
<div class="modal fade" id="deleteAccountModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-danger">⚠ Confirm Account Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="text-danger">Are you sure you want to delete your account? This action is irreversible!</p>
                <input type="password" id="passwordInput" class="form-control" placeholder="Enter your password">
                <input type="text" id="confirmDeleteInput" class="form-control mt-2" placeholder='Type "DELETE" to confirm'>
                <p id="errorMessage" class="text-danger mt-2" style="display:none;">❌ Incorrect password or confirmation text.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="confirmDeleteBtn" class="btn btn-danger" disabled>Delete</button>
            </div>
        </div>
    </div>
</div>

<script>
    const editButton = document.getElementById('editButton');
    const saveButton = document.getElementById('saveButton');
    const profileForm = document.getElementById('profileForm');
    const profilePictureInput = document.getElementById('profilePicture');
    const timeZoneSelect = document.getElementById('timeZone');

    const editableFields = ['fullName', 'nickName'];

    const formInputs = Array.from(profileForm.querySelectorAll('input')).filter(input =>
        editableFields.includes(input.id)
    );

    editButton.addEventListener('click', () => {
        formInputs.forEach(input => input.removeAttribute('readonly'));
        profilePictureInput.removeAttribute('disabled');
        timeZoneSelect.removeAttribute('disabled');
        editButton.style.display = 'none';
        saveButton.style.display = 'inline-block';
    });

    profileForm.addEventListener('submit', (e) => {
        e.preventDefault();

        const formData = new FormData(profileForm);
        const fileInput = document.getElementById('profilePicture');

        if (fileInput.files.length > 0) {
            formData.append('ProfilePicture', fileInput.files[0]);
        }

        fetch('/Profile/Edit', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(data.message);
                formInputs.forEach(input => input.setAttribute('readonly', true));
                profilePictureInput.setAttribute('disabled', true);
                timeZoneSelect.setAttribute('disabled', true);
                editButton.style.display = 'inline-block';
                saveButton.style.display = 'none';
            } else {
                alert('Failed to update profile: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    });

    const profilePicture = document.querySelector('.iamge img');

    profilePicture.addEventListener('click', () => {
        profilePicture.classList.toggle('clicked');
    });

    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', () => {
            const navbarToggler = document.querySelector('.navbar-toggler');
            const navbarCollapse = document.querySelector('.navbar-collapse');

            if (navbarToggler && navbarCollapse.classList.contains('show')) {
                navbarToggler.click(); // Simulates a toggle button click
            }
        });
    });

    document.getElementById('deleteAccountBtn').addEventListener('click', function () {
        new bootstrap.Modal(document.getElementById('deleteAccountModal')).show();
    });

    const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
    const passwordInput = document.getElementById("passwordInput");
    const confirmDeleteInput = document.getElementById("confirmDeleteInput");
    const errorMessage = document.getElementById("errorMessage");

    function validateDeleteInputs() {
        if (passwordInput.value.length > 0 && confirmDeleteInput.value === "DELETE") {
            confirmDeleteBtn.removeAttribute("disabled");
        } else {
            confirmDeleteBtn.setAttribute("disabled", "true");
        }
    }

    passwordInput.addEventListener("input", validateDeleteInputs);
    confirmDeleteInput.addEventListener("input", validateDeleteInputs);

    confirmDeleteBtn.addEventListener("click", function () {
        confirmDeleteBtn.innerHTML = "Deleting...";
        confirmDeleteBtn.disabled = true;

        fetch('/Profile/DeleteAccount', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ password: passwordInput.value })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.href = data.redirectUrl; // Redirect to the "Deleted" page
            } else {
                errorMessage.style.display = "block";
                confirmDeleteBtn.innerHTML = "Delete";
                confirmDeleteBtn.disabled = false;
            }
        });
    });
</script>